---
title: Modern, open and downward-scaleable data engineering
subtitle: Getting started with the composable data stack
format: clean-revealjs

html-math-method:
  method: mathjax
  url: "https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js"
author:
  - name: Dr Daniel Kapitan
    orcid: 0000-0001-8979-9194
    email: daniel@kapitan.net
    affiliations: Eindhoven AI Systems Institute
date: last-modified

---

## Attribution & copyright notice

This lecture is based on the following open access materials:

- Voltron Data, [The Composable Codex](https://voltrondata.com/codex/a-new-frontier)
- Cody Peterson, [Modern, hybrid, open analytics](https://anthology-of-data.science/posts/ibis-analytics/)
- Thierry Jean, [Portable dataflows with Ibis and Hamilton](https://anthology-of-data.science/posts/hamilton-ibis/)
- Documentation of the following Python libraries: [DuckDB](https://duckdb.org/docs/), [Ibis](https://ibis-project.org), [hamilton](https://github.com/dagworks-inc/hamilton), [polars](https://docs.pola.rs/), [Shiny for Python](https://shiny.posit.co/py/)


```{=html}
<p xmlns:cc="http://creativecommons.org/ns#" >Daniel Kapitan, <em>Modern, open and downward-scaleable data engineering</em>.<br>This work is licensed under <a href="https://creativecommons.org/licenses/by-sa/4.0/?ref=chooser-v1" target="_blank" rel="license noopener noreferrer" style="display:inline-block;">CC BY-SA 4.0<img style="height:22px!important;margin-left:3px;vertical-align:text-bottom;" src="https://mirrors.creativecommons.org/presskit/icons/cc.svg?ref=chooser-v1" alt=""><img style="height:22px!important;margin-left:3px;vertical-align:text-bottom;" src="https://mirrors.creativecommons.org/presskit/icons/by.svg?ref=chooser-v1" alt=""><img style="height:22px!important;margin-left:3px;vertical-align:text-bottom;" src="https://mirrors.creativecommons.org/presskit/icons/sa.svg?ref=chooser-v1" alt=""></a></p>
```

## Learning objectives

<br>

:::: {.columns style="font-size: 80%;"}

::: {.column width="50%"}

### Understand

- how data platforms evolved in the past couple of decades
- what problems are with current data platforms
- what concepts underlie the composable data stack
- what concepts underlie modern data engineering workflows

:::

::: {.column width="50%"}

### Know how to

- Build end-to-end data pipeline using open standards and open source
- Use the split-apply-combine strategy with various syntaxes
- ...
- ...

:::
::::

::: {style="font-size: 80%;"}
### Reflect

- on how this impact your (future) work as a data engineer
- on the pro's and con's of open standards and open source

::: 

# Understand
## The problem
### The ML/AI/Data (MAD) Landscape

::: {style="font-size: 60%;"}
![Source: [https://mad.firstmark.com/](https://mad.firstmark.com/)](images/open-standards-mad-landscape.jpg)
:::

## The Composable Data Management System Manifesto

> _The requirement for specialization in data management systems has evolved faster than our software development practices. After decades of organic growth, this situation has created a **siloed landscape** composed of hundreds of products developed and maintained as monoliths, with limited reuse between systems. This fragmentation has resulted in developers often reinventing the wheel, **increased maintenance costs, and slowed down innovation**. It has also affected the end users, who are often required to learn the **idiosyncrasies of dozens of incompatible SQL and non-SQL API dialects**, and settle for systems with incomplete functionality and inconsistent semantics._

::: {style="font-size: 60%;"}
Pedreira, Pedro, et al. [The composable data management system manifesto.](https://dl.acm.org/doi/10.14778/3603581.3603604) Proceedings of the VLDB Endowment 16.10 (2023): 2679-2685.
:::

## Let's start at the beginning
### Edgar Codd invents relational algebra (1970)

![](images/coddpaper.webp)

::: {style="font-size: 60%;"}
E. F. Codd. [A relational model of data for large shared data banks.](https://doi.org/10.1145/362384.362685) Commun. ACM 13, 6 (June 1970), 377–387. 
:::

## Standard Query Language (SQL)
### Still the most important language for a data engineer

![](images/sql-cheat-sheet.webp)

::: {style="font-size: 60%;"}
Source: Jadwiga Wilkens on Medium. [The Best BigQuery SQL Cheat Sheet for Beginners.](https://medium.com/data-school/the-best-bigquery-sql-cheat-sheet-for-beginners-81c762f72845)
:::


## Evolution of data platfom architectures

![](images/generations-data-plattforms.png)

::: {style="font-size: 60%;"}
Armbrust, Michael, et al. [Lakehouse: a new generation of open platforms that unify data warehousing and advanced analytics.](https://15721.courses.cs.cmu.edu/spring2023/papers/02-modern/armbrust-cidr21.pdf) Proceedings of CIDR. Vol. 8. 2021.
:::

## Decomposing the venerable relational database management system (RDBMS)

![](images/db-catalog-schema.png)

::: {style="font-size: 60%;"}
Source: Basil Borque on [Stackoverflow](https://stackoverflow.com/questions/7022755/whats-the-difference-between-a-catalog-and-a-schema-in-a-relational-database)
:::


## From row-based to column-based tables
### Columnar is fast, especially if we all share the same format


:::: {.columns}

::: {.column width="50%" style="font-size: 60%;"}
![](images/row-vs-columnar-data.png)

Image source: [Apache Arrow overview](https://arrow.apache.org/overview/)
:::

::: {.column width="50%"}
![](images/arrow-copy.png)
![](images/arrow-shared.png)
:::

::::



## {background-color="black"}

![](images/importance-of-interoperability.png)

## Decomposing the database into open standards

![](images/parquet-arrow-iceberg.png)


## The Composable Data Stack
### Layers
![](images/composable-data-stack-layers.png)

## The Composable Data Stack
### Standards
![](images/composable-data-stack-standards.png)

## The Composable Data Stack
### Implementations
![](images/composable-data-stack-implementation.png)

## Big Data Is Dead

![](images/big-data-is-dead.webp)

::: {style="font-size: 60%;"}
Source: Jordan Tigani, [Big Data Is Dead.](https://motherduck.com/blog/big-data-is-dead/)
:::

## You can work with 100s GB of data on a single machine
### All you need is a PC and some open source libraries
![](images/embedded-db-duckdb.png)

::: {style="font-size: 60%;"}
Source: The Data Quarry::blog [Embedded databases (1): The harmony of DuckDB, KùzuDB and LanceDB.](https://thedataquarry.com/posts/embedded-db-1/)
:::


# Know How To

## From components to a whole platform architecture

![](images/Unified-Data-Infrastructure-2.0.png)

::: {style="font-size: 60%;"}
Source: Andreessen Horowitz, [Emerging Architecture for Modern Data Infrastructure](https://a16z.com/emerging-architectures-for-modern-data-infrastructure/).
:::

## The Composable Data Stack in Practice
### Let's get into building an end-to-end stack
![](images/ibis-analytics-overview.png)

## The Pipeline Pattern
### Directed Acyclyc Graphs, ETL/ELT and functional data engineering

<br>

![](images/hamilton-architecture-overview.webp)

::: {style="font-size: 60%;"}
Source: [Hamilton](https://hamilton.dagworks.io/en/latest/).
:::

## Dagster
### Software-Defined Assets

![](images/software-defined-asset.png)

::: {style="font-size: 60%;"}
Source: Dagster [Introducing Software-Defined Assets.](https://dagster.io/blog/software-defined-assets)
:::


## The split-apply-combine strategy for data analysis
<br>![](images/split-apply-combine.webp)

::: {style="font-size: 60%;"}
Wickham, H. (2011). The Split-Apply-Combine Strategy for Data Analysis. Journal of Statistical Software, 40(1), 1–29. [https://doi.org/10.18637/jss.v040.i01](https://www.jstatsoft.org/article/view/v040i01)
:::

## The split-apply-combine strategy for data analysis

### Overview data transformations in different libraries

<br>

::: {style="font-size: 80%;"}

| concept | pandas | polars | ibis | PySpark | dplyr | SQL |
| --- | --- | ---| --- | --- | --- | --- |
| **split** | groupby() | group_by() | group_by() | groupBy() | group_by() | GROUP BY |
| **combine** | join (), merge() | join() | left_join, inner_join() etc. |  join() | left_join, inner_join() etc. | LEFT JOIN, JOIN etc. |
| **filtering (row based)**| loc[], query() | filter() | filter() | filter() | filter() | WHERE | 
| **select (column based)**| loc[], iloc[],| select() | select() | select() | select() | SELECT | 
| **mutate** | assign() | with_columns() | mutuate() | withColumn() | mutate() | ADD | 
| **ordering** | sort_values() | sort() | order_by() | orderBy() | arrange() | ORDER BY |

:::

## Working with nested data

### Gotcha! Unforunately there is no standard naming yet ...

<br>

| operation | ibis | polars | duckdb |
| --- | --- | --- | --- |
| Flatten `Array` into multiple rows | [`ArrayValue.unnest()`](https://ibis-project.org/reference/expression-collections.html#ibis.expr.types.arrays.ArrayValue.unnest) | [`DataFrame.explode()`](https://docs.pola.rs/api/python/stable/reference/dataframe/api/polars.DataFrame.explode.html#polars.DataFrame.explode) | [`UNNEST`](https://duckdb.org/docs/sql/query_syntax/unnest.html) |
| Unnest `Struct` into multiple columns | [`Table.unpack(*columns)`](https://ibis-project.org/reference/expression-tables#ibis.expr.types.relations.Table.unpack) | [`DataFrame.unnest()`](https://docs.pola.rs/api/python/stable/reference/dataframe/api/polars.DataFrame.unnest.html) | [`UNNEST`](https://duckdb.org/docs/sql/query_syntax/unnest.html) |

::: {style="font-size: 80%;"}

Ibis also has methods that operate directly on a column of structs:

- [`StructValue.destructure()`](https://ibis-project.org/reference/expression-collections#ibis.expr.types.structs.StructValue.destructure)
- [`StructValue.lift()`](https://ibis-project.org/reference/expression-collections#ibis.expr.types.structs.StructValue.lift)

:::


## You can swap components to your hearts content
### My personal preferences

<br>

| component | Ibis analytics demo | My preference |
|-----|-----|-----|
| Workflow orchestration | [Dagster](https://docs.dagster.io/getting-started) | [Hamilton](https://hamilton.dagworks.io/en/latest/) |
| Persistent storage | parquet, native DuckDB files | [Apache Iceberg](https://py.iceberg.apache.org/) |
| Dashboarding app | [Streamlit](https://docs.streamlit.io/) | [Shiny for Python](https://shiny.posit.co/py/docs/overview.html), [Quarto](https://quarto.org) |
| Visualization | [plotly](https://plotly.com/python/) | [vega-altair](https://altair-viz.github.io/) |

# Reflect


