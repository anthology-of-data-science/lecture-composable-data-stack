---
title: Modern, open and downward-scaleable data engineering
subtitle: Getting started with the composable data stack
format: clean-revealjs

html-math-method:
  method: mathjax
  url: "https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js"
author:
  - name: Dr Daniel Kapitan
    orcid: 0000-0001-8979-9194
    email: daniel@kapitan.net
    affiliations: Eindhoven AI Systems Institute
date: last-modified

---

## Attribution & copyright notice

This lecture is based on the following open access materials:

- Voltron Data, [The Composable Codex](https://voltrondata.com/codex/a-new-frontier)
- Cody Peterson, [Modern, hybrid, open analytics](https://anthology-of-data.science/posts/ibis-analytics/)
- Thierry Jean, [Portable dataflows with Ibis and Hamilton](https://anthology-of-data.science/posts/hamilton-ibis/)
- Documentation of the following Python libraries: [DuckDB](https://duckdb.org/docs/), [Ibis](https://ibis-project.org), [hamilton](https://github.com/dagworks-inc/hamilton), [polars](https://docs.pola.rs/), [Shiny for Python](https://shiny.posit.co/py/)


```{=html}
<p xmlns:cc="http://creativecommons.org/ns#" >Daniel Kapitan, <em>Modern, open and downward-scaleable data engineering</em>.<br>This work is licensed under <a href="https://creativecommons.org/licenses/by-sa/4.0/?ref=chooser-v1" target="_blank" rel="license noopener noreferrer" style="display:inline-block;">CC BY-SA 4.0<img style="height:22px!important;margin-left:3px;vertical-align:text-bottom;" src="https://mirrors.creativecommons.org/presskit/icons/cc.svg?ref=chooser-v1" alt=""><img style="height:22px!important;margin-left:3px;vertical-align:text-bottom;" src="https://mirrors.creativecommons.org/presskit/icons/by.svg?ref=chooser-v1" alt=""><img style="height:22px!important;margin-left:3px;vertical-align:text-bottom;" src="https://mirrors.creativecommons.org/presskit/icons/sa.svg?ref=chooser-v1" alt=""></a></p>
```

## Our common problem
### The ML/AI/Data (MAD) Landscape

![Source: [https://mad.firstmark.com/](https://mad.firstmark.com/)](images/open-standards-mad-landscape.jpg)


## The split-apply-combine strategy for data analysis
<br>![](images/split-apply-combine.webp)

::: {style="font-size: 80%;"}
Wickham, H. (2011). The Split-Apply-Combine Strategy for Data Analysis. Journal of Statistical Software, 40(1), 1â€“29. [https://doi.org/10.18637/jss.v040.i01](https://www.jstatsoft.org/article/view/v040i01)
:::

## The split-apply-combine strategy for data analysis

### Overview data transformations in different libraries

<br>

::: {style="font-size: 80%;"}

| concept | pandas | polars | ibis | PySpark | dplyr | SQL |
| --- | --- | ---| --- | --- | --- | --- |
| **split** | groupby() | group_by() | group_by() | groupBy() | group_by() | GROUP BY |
| **combine** | join (), merge() | join() | left_join, inner_join() etc. |  join() | left_join, inner_join() etc. | LEFT JOIN, JOIN etc. |
| **filtering (row based)**| loc[], query() | filter() | filter() | filter() | filter() | WHERE | 
| **select (column based)**| loc[], iloc[],| select() | select() | select() | select() | SELECT | 
| **mutate** | assign() | with_columns() | mutuate() | withColumn() | mutate() | ADD | 
| **ordering** | sort_values() | sort() | order_by() | orderBy() | arrange() | ORDER BY |

:::

## Working with nested data

### Gotcha! Unforunately there is no standard naming yet ...

<br>

| operation | ibis | polars | duckdb |
| --- | --- | --- | --- |
| Flatten `Array` into multiple rows | [`ArrayValue.unnest()`](https://ibis-project.org/reference/expression-collections.html#ibis.expr.types.arrays.ArrayValue.unnest) | [`DataFrame.explode()`](https://docs.pola.rs/api/python/stable/reference/dataframe/api/polars.DataFrame.explode.html#polars.DataFrame.explode) | [`UNNEST`](https://duckdb.org/docs/sql/query_syntax/unnest.html) |
| Unnest `Struct` into multiple columns | [`Table.unpack(*columns)`](https://ibis-project.org/reference/expression-tables#ibis.expr.types.relations.Table.unpack) | [`DataFrame.unnest()`](https://docs.pola.rs/api/python/stable/reference/dataframe/api/polars.DataFrame.unnest.html) | [`UNNEST`](https://duckdb.org/docs/sql/query_syntax/unnest.html) |

::: {style="font-size: 80%;"}

Ibis also has methods that operate directly on a column of structs:

- [`StructValue.destructure()`](https://ibis-project.org/reference/expression-collections#ibis.expr.types.structs.StructValue.destructure)
- [`StructValue.lift()`](https://ibis-project.org/reference/expression-collections#ibis.expr.types.structs.StructValue.lift)

:::

## Composable data stack
### Concept
![](images/composable-data-stack.png)

## Composable data stack
### Layers
![](images/composable-data-stack-layers.png)

## Composable data stack
### Standards
![](images/composable-data-stack-standards.png)

## Composable data stack
### Implementations
![](images/composable-data-stack-implementation.png)


## Want more?

### See our longer demo slides

We've deliberarely kept this template lean, to get you up and running as fast as
possible.

We provide a separate
[demo template](https://github.com/grantmcdermott/quarto-revealjs-clean-demo),
with more examples for integrating code, tables, figures, etc.

  - See the live demo slides
  [here](https://grantmcdermott.com/quarto-revealjs-clean-demo/template.html).

## Summary {#sec-summary}

### A minimalist and elegant presentation theme

- The Quarto reveal.js clean theme aims to be a minimalist and elegant presention
theme. Here are some options to get you started:

- Add the theme to an existing project.

```{.bash}
quarto install extension grantmcdermott/quarto-revealjs-clean
```

... or, create a new project using this slide deck as a lean template.

```{.bash}
quarto use template grantmcdermott/quarto-revealjs-clean
```

... or, create a new project using the demo slide deck as a full template.

```{.bash}
quarto use template grantmcdermott/quarto-revealjs-clean-demo
```
